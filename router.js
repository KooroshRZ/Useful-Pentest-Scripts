/**
 * @param {Egg.Application} app - egg application
 */
module.exports = app => {
  const { router, controller } = app;

  router.get('/alive', controller.healthController.alive);
  router.get('/documentation', controller.documentationController.index);

  // no auth endpoints (config.default.js)
  router.post('/public/webhooks/stripe', controller.api.billingController.webhook);

  // Core routes
  router.resources('/catalog/statements', controller.catalog.statementController);
  router.resources('/catalog/userstatements', controller.catalog.userStatementController);
  router.resources('/catalog/products', controller.catalog.productController);
  router.resources('/catalog/artists', controller.catalog.artistController);
  router.get('/catalog/products/:id/history', controller.catalog.productController.getProductHistory);
  router.post('/catalog/products/:id/cover', controller.catalog.productController.coverUpload);
  router.get('/catalog/products/:id/vault', controller.catalog.productController.generateZip);
  router.delete('/catalog/products/:id/cover', controller.catalog.productController.deleteCover);
  router.post('/catalog/products/:id/cover/check', controller.catalog.productController.coverUploadCheck);
  router.put('/catalog/products/:id/autofill-earning-accounts', controller.catalog.productController.autofillEarningAccounts);
  router.get('/catalog/products/:id/get-track-earning-accounts', controller.catalog.productController.getDefaultTrackEarningAccounts);
  router.resources('/catalog/labels', controller.catalog.labelController);
  router.post('/catalog/labels/:id/cover', controller.catalog.labelController.coverUpload);
  router.post('/catalog/labels/:id/cover/check', controller.catalog.labelController.coverUploadCheck);
  router.resources('/catalog/tracks', controller.catalog.trackController);
  router.post('/catalog/tracks/:id/upload', controller.catalog.trackController.upload);
  router.get('/catalog/tracks/:id/files', controller.catalog.trackController.getDownloadLinks);
  router.delete('/catalog/tracks/:id/upload', controller.catalog.trackController.deleteAudio);
  router.post('/catalog/tracks/:id/upload/stem', controller.catalog.trackController.uploadStem);
  router.delete('/catalog/tracks/:id/upload/stem', controller.catalog.trackController.deleteStem);
  router.post('/catalog/tracks/:id/upload/check', controller.catalog.trackController.uploadCheck);
  router.post('/catalog/tracks/:id/fromold', controller.catalog.trackController.uploadOldTrackToMinio);
  router.post('/catalog/products/:id/transition/:action', controller.catalog.productController.transition);
  router.get('/catalog/products/request-bundles/:requestBundleId', controller.catalog.requestBundleController.getProductByRequestBundleId);
  router.get('/catalog/products/catalog-number-check/:catNo', controller.catalog.productController.catNoPrefixAlreadyUsed);

  router.get('/catalog/products/:id/trendreports', controller.catalog.productController.getFugaProductTrendreports);
  router.get('/catalog/products/:id/trendreports/assets', controller.catalog.productController.getFugaAssetsTrendreports);
  router.get('/catalog/products/:id/trendreports/assets/dsps', controller.catalog.productController.getFugaAssetsGroupedByDspTrendreports);
  router.get('/catalog/labels/:id/trendreports', controller.catalog.labelController.getFugaLabelTrendreport);

  router.get('/metadata/genres', controller.metadata.genreController.index);
  router.get('/metadata/productformats', controller.metadata.productFormatController.index);
  router.get('/metadata/countrygroups', controller.metadata.countryGroupController.index);
  router.get('/metadata/countries', controller.metadata.countryController.index);
  router.get('/metadata/languages', controller.metadata.languageController.index);
  router.get('/metadata/shops', controller.metadata.shopController.index);
  router.get('/metadata/shopgroups', controller.metadata.shopGroupsController.index);

  router.get('/news', controller.admin.articleController.index);
  router.get('/user/info', controller.userController.info);
  router.post('/user/survey', controller.userController.survey);
  router.put('/user/info', controller.userController.infoEdit);

  router.post('/user/login', controller.userController.login);
  router.post('/user/forgotpassword', controller.userController.forgotPassword);
  router.post('/user/resetpassword', controller.userController.resetPassword);
  router.post('/user/changepassword', controller.userController.changePassword);
  router.get('/user/notifications', controller.userController.getNotifications);
  router.put('/user/notifications', controller.userController.updateNotificationStatus);
  router.post('/user/newpassword', controller.userController.resetPasswordAndCreateNewPassword);

  router.post('/contracts/:id/subscribe', controller.core.contractController.subscribe);
  router.post('/contracts/:id/create-payment-customer', controller.core.contractController.createStripeCustomer);
  router.get('/contracts/:id/payment-method', controller.core.contractController.getPaymentMethod);
  router.post('/contracts/:id/attach-payment-method', controller.core.contractController.attachPaymentMethod);
  router.post('/contracts/:id/unsubscribe', controller.core.contractController.unsubscribe);
  router.get('/contract/users', controller.core.contractController.getUsers);
  router.post('/contract/users', controller.core.contractController.addUser);
  router.put('/contract/users/:userId', controller.core.contractController.updateUser);
  router.delete('/contract/users/:userId', controller.core.contractController.deleteUser);
  router.get('/contract/consumption', controller.core.contractController.getConsumption);
  router.get('/contract/subscriptions/history', controller.core.subscriptionHistoryController.index);
  router.put('/contract/update', controller.core.contractController.updateContract);

  router.resources('/api/products', controller.api.productController);
  router.post('/api/products/exportHook', controller.api.productController.exportWebhook);
  router.resources('/api/tracks', controller.api.trackController);
  router.resources('/api/artists', controller.api.artistController);
  router.get('tracksOfArtist', '/api/artists/:id/tracks', controller.api.artistController.getTracks);
  router.get('tracksForArtistStatement', '/api/artists/:id/tracks-for-statements', controller.api.artistController.getTracksForArtistStatement);

  router.resources('/api/contracts', controller.api.contractController);
  router.get('/api/tenants/:id', controller.api.tenantController.show);
  router.resources('/api/users', controller.api.userController);
  router.resources('/api/shops', controller.api.shopController);
  router.resources('/api/labels', controller.api.labelController);
  router.resources('/api/userstatements', controller.api.userStatementController);
  router.resources('/api/statements', controller.api.statementController);
  router.get('trackCover', '/api/tracks/:id/cover', controller.api.trackController.getCover);
  router.get('trackFiles', '/api/tracks/:id/files', controller.api.trackController.getDownloadLinks);

  router.post('/api/statements/imported', controller.api.statementController.importedCreditnote);
  router.post('/api/fuga/products/ingestion/callback', controller.api.productController.fugaWebhook);

  router.get('/spotify/search', controller.spotifyController.search);

  router.get('/language/detect', controller.languageController.detectLanguage);

  router.get('/admin/notifications', controller.admin.notificationController.getNotifications);
  router.get('/admin/notifications/:id', controller.admin.notificationController.getNotification);

  router.get('/admin/products/:contractId/upc/:productId', controller.admin.productController.generateUpc);
  router.post('/admin/products/:id/transition/:action', controller.admin.productController.transition);
  router.get('/admin/products/:id/shops', controller.admin.productController.productShops);
  router.post('/admin/products/:id/takedown', controller.admin.productController.takedown);
  router.get('/admin/products/:id/history', controller.admin.productController.getProductHistory);
  router.get('/admin/products/:id/delivery_instructions', controller.admin.productController.getProductDeliveryInstructions);
  router.get('/admin/products/:id/delivery_instructions/dsp_states', controller.admin.productController.getDspStates);
  router.delete('/admin/products/bulk', controller.admin.productController.bulkDelete);
  router.resources('/admin/products', controller.admin.productController);
  router.get('/admin/productsWithTenants', controller.admin.productController.getProductsWithTenants);
  router.post('/admin/products/:id/cover', controller.admin.productController.coverUpload);
  router.delete('/admin/products/:id/cover', controller.admin.productController.deleteCover);
  router.post('/admin/products/:id/cover/check', controller.admin.productController.coverUploadCheck);
  router.post('/admin/products/:id/publish', controller.admin.productController.publish);
  router.post('/admin/products/publishAll', controller.admin.productController.publishAll);
  router.post('/admin/products/reorderTracks', controller.admin.productController.reorderTracks);
  router.resources('/admin/artists', controller.admin.artistController);
  router.resources('/admin/contracts', controller.admin.contractController);
  router.get('/admin/contractsNoCount', controller.admin.contractController.getContractsNoCount);
  router.post('/admin/contracts/:id/subscribe', controller.admin.contractController.subscribe);
  router.post('/admin/contracts/:id/unsubscribe', controller.admin.contractController.unsubscribe);
  router.put('/admin/contracts/:id/updatesubscription', controller.admin.contractController.updateSubscription);
  router.resources('/admin/articles', controller.admin.articleController);
  router.post('/admin/articles/:id/uploadimage', controller.admin.articleController.uploadImage);
  router.post('/admin/contracts/rasaParse', controller.admin.contractController.parseContractReference);
  router.post('/admin/contracts/:id/artists-sync-with-spotify', controller.admin.contractController.artistSyncWithSpotify);
  router.post('/admin/products/scale', controller.admin.productController.scaleCoverArt);
  router.post('/admin/products/export', controller.admin.productController.exportAll);
  router.post('/admin/products/export/byUser', controller.admin.productController.exportByUser);
  router.post('/admin/products/export/:id', controller.admin.productController.exportProduct);
  router.resources('/admin/labels', controller.admin.labelController);
  router.post('/admin/labels/:id/cover', controller.admin.labelController.coverUpload);
  router.post('/admin/labels/:id/cover/check', controller.admin.labelController.coverUploadCheck);
  router.post('/admin/labels/:id/sync', controller.admin.labelController.publishLabelAction);
  router.post('/admin/labels/:id/changeContract', controller.admin.labelController.changeContract);
  router.resources('/admin/shops', controller.admin.shopController);
  router.resources('/admin/tracks', controller.admin.trackController);
  router.get('/admin/tracksNoCount', controller.admin.trackController.getTracksNoCount);
  router.post('/admin/tracks/bulkDelete', controller.admin.trackController.bulkDelete);
  router.post('/admin/tracks/generate-missing-mp3s', controller.admin.trackController.generateMissingMp3s);
  router.get('/admin/tracks/:id/files', controller.admin.trackController.getDownloadLinks);
  router.post('/admin/tracks/:id/upload', controller.admin.trackController.upload);
  router.delete('/admin/tracks/:id/upload', controller.admin.trackController.deleteAudio);
  router.post('/admin/tracks/:id/upload/stem', controller.admin.trackController.uploadStem);
  router.delete('/admin/tracks/:id/upload/stem', controller.admin.trackController.deleteStem);
  router.post('/admin/tracks/:id/upload/check', controller.admin.trackController.uploadCheck);
  router.post('/admin/tracks/publish', controller.admin.trackController.publishTracks);
  router.get('/admin/tracks/:id/products', controller.admin.productController.getProductByTrackId);
  router.post('/admin/contracts/bulk/migrate', controller.admin.contractController.migrateToNewContract);
  router.post('/admin/contracts/:id/files/upload', controller.admin.contractController.upload);
  router.delete('/admin/contracts/:id/files/:fileId', controller.admin.contractController.deleteFile);
  router.get('/admin/contracts/:contractId/users', controller.admin.contractController.getUsers);
  router.put('/admin/contracts/:contractId/end', controller.admin.contractController.endContract);
  router.resources('/admin/contracts/:contractId/comments', controller.admin.contractCommentController);
  router.get('/admin/contracts/:contractId/history', controller.admin.contractController.getContractHistory);
  router.resources('/admin/contracts/:contractId/billableEvents', controller.admin.billableEventController);
  router.get('/admin/contracts/:contractId/consumption/billableEvents', controller.admin.billableEventController.getContractConsumption);
  router.post('/admin/contracts/:contractId/users', controller.admin.contractController.addUser);
  router.resources('/admin/contracts/:contractId/deals', controller.admin.contracttermsController);
  router.put('/admin/contracts/:contractId/users/:userId', controller.admin.contractController.updateUser);
  router.delete('/admin/contracts/:contractId/users/:userId', controller.admin.contractController.deleteUser);
  router.get('/admin/contracts/:contractId/downloads', controller.admin.contractController.getContractFileUrl);
  router.get('/admin/contracts/:contractId/diagram', controller.admin.contractController.getDiagramData);
  router.resources('/admin/statements', controller.admin.statementController);
  router.resources('/admin/genres', controller.admin.genreController);
  router.post('/admin/shopgroups/:id/add-shop', controller.admin.shopGroupsController.addAShop);
  router.delete('/admin/shopgroups/:id/remove-shop', controller.admin.shopGroupsController.removeAShop);

  // accounting related endpoints
  router.get('/admin/accounting/report', controller.admin.accountingController.getReport);
  router.get('/admin/contracts/:contractId/accounting-summary', controller.admin.accountingController.getSummaryOfContract);
  router.post('/admin/statements-paid-many', controller.admin.accountingController.paidMany);
  router.post('/admin/statements/:statementId/revert-payout', controller.admin.accountingController.revertPayout);
  router.put('/admin/statements/:contractId/comments', controller.admin.accountingController.createComments);

  router.get('/admin/users/:id/impersonate', controller.admin.userController.impersonate);
  router.resources('/admin/users', controller.admin.userController);
  router.post('/admin/users/:id/resetpassword', controller.admin.userController.resetPassword);

  router.resources('/admin/tenants', controller.admin.tenantController);
  router.get('/admin/tenants', controller.admin.tenantController.index);
  router.get('/admin/tenants/:id', controller.admin.tenantController.show);
  router.post('/admin/tenants/', controller.admin.tenantController.create);
  router.put('/admin/tenants/:id', controller.admin.tenantController.update);
  router.delete('/admin/tenants/:id', controller.admin.tenantController.destroy);

  router.resources('/admin/earning-accounts', controller.admin.earningAccountController);
  router.get('/admin/earning-accounts', controller.admin.earningAccountController.index);
  router.get('/admin/earning-accounts/:id', controller.admin.earningAccountController.show);
  router.post('/admin/earning-accounts/', controller.admin.earningAccountController.create);
  router.put('/admin/earning-accounts/:id', controller.admin.earningAccountController.update);
  router.delete('/admin/earning-accounts/:id', controller.admin.earningAccountController.destroy);

  router.get('/admin/reports/organizations', controller.admin.reportController.getOrganizations);
  router.get('/admin/reports/contractcreator', controller.admin.reportController.getContractCreator);
  router.get('/admin/reports/contractparameters', controller.admin.reportController.getContractParameters);
  router.get('/admin/reports/assets', controller.admin.reportController.getAssets);
  router.post('/admin/reports/customAssets', controller.admin.reportController.getCustomAssets);
  router.get('/admin/reports/curatorAssets', controller.admin.reportController.getCuratorAssets);
  router.get('/admin/reports/fugafails', controller.admin.reportController.failedProducts);
  router.resources('/admin/tasks', controller.admin.tasksController);
  router.get('/admin/codes', controller.admin.generatedCodesController.index);
  router.get('/admin/codes/:id', controller.admin.generatedCodesController.show);
  router.post('/admin/codes', controller.admin.generatedCodesController.create);

  router.get('grmExportUser', '/public/reports/grmExport', controller.reports.grmController.getReportAdmin);
  router.get('grmExportAdmin', '/contract/reports/grm', controller.reports.grmController.getReportUser);

  router.resources('/global/tracks', controller.global.trackController);
  router.get('/global/artists', controller.global.artistController.index);
  router.get('/global/tracks/:id/files', controller.global.trackController.getDownloadLinks);
};
